import xml.etree.ElementTree as ET
from datetime import date


def IMSContent(quizData):
    today = date.today()
    todayFormatted = today.strftime("%Y-%m-%d")

    # Manifest information
    data = ET.Element('manifest', {'xsi:schemaLocation': 'http://www.imsglobal.org/xsd/imsccv1p1/imscp_v1p1 http://www.imsglobal.org/xsd/imscp_v1p1.xsd http://ltsc.ieee.org/xsd/imsccv1p1/LOM/resource http://www.imsglobal.org/profile/cc/ccv1p1/LOM/ccv1p1_lomresource_v1p0.xsd http://www.imsglobal.org/xsd/imsmd_v1p2 http://www.imsglobal.org/xsd/imsmd_v1p2p2/xsd',
                                      'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
                                      'xmlns:imsmd': 'http://www.imsglobal.org/xsd/imsmd_v1p2',
                                      'xmlns:lom': 'http://ltsc.ieee.org/xsd/imsccv1p1/LOM/resource',
                                      'xmlns': 'http://www.imsglobal.org/xsd/imsccv1p1/imscp_v1p1',
                                      'identifer': 'md2qti_manifest_' + quizData.ident})
    # data = ET.Element('testtest')
    metadata = ET.SubElement(data, 'metadata')
    schema = ET.SubElement(metadata, 'schema')
    schemaversion = ET.SubElement(metadata, 'schemaversion')
    schema.text = 'IMS Content'
    schemaversion.text = '1.1.3'
    imsmdlom = ET.SubElement(metadata, 'imsmd:lom')
    imsmdgeneral = ET.SubElement(imsmdlom, 'imsmd:general')
    imsmdtitle = ET.SubElement(imsmdgeneral, 'imsmd:title')
    imsmdstring = ET.SubElement(imsmdtitle, 'imsmd:string')
    imsmdstring.text = 'QTI assessment generated by md2qti'
    imsmdlifecycle = ET.SubElement(imsmdlom, 'imsmd:lifeCycle')
    imsmdcontribute = ET.SubElement(imsmdlifecycle, 'imsmd:contribute')
    imsmddate = ET.SubElement(imsmdcontribute, 'imsmd:date')
    imsmddatetime = ET.SubElement(imsmddate, 'imsmd:dateTime')
    imsmddatetime.text = todayFormatted
    imsmdrights = ET.SubElement(imsmdlom, 'imsmd:rights')
    imsmdcopyright = ET.SubElement(imsmdrights, 'imsmd:copyrightAndOtherRestrictions')
    imsmdvalue = ET.SubElement(imsmdcopyright, 'imsmd:value')
    imsmdvalue.text = 'yes'
    imsmddescription = ET.SubElement(imsmdrights, 'imsmd:description')
    imsmdstring = ET.SubElement(imsmddescription, 'imsmd:string')
    imsmdstring.text = 'Private (Copyrighted) - http://en.wikipedia.org/wiki/Copyright'

    organizations = ET.SubElement(data, 'organizations')

    resources = ET.SubElement(data, 'resources')
    resource = ET.SubElement(resources, 'resource', {'identifier': 'md2qti_assessment_'+quizData.ident, 'type': 'imsqti_xmlv1p2'})
    file = ET.SubElement(resource, 'file', {'href': 'md2qti_assessment_'+quizData.ident+'/'+'md2qti_assessment_'+quizData.ident+'.xml'})
    dependency = ET.SubElement(resource, 'dependency', {'identifierref': 'md2qti_dependency_'+quizData.assessmentIdent})
    resource = ET.SubElement(resources, 'resource', {'identifier': 'md2qti_dependency_'+quizData.assessmentIdent,
                                                    'type': 'associatedcontent/imscc_xmlv1p1/learning-application-resource',
                                                    'href': quizData.ident + '/assessment_meta.xml'})
    file = ET.SubElement(resource, 'file', {'href': 'md2qti_assessment_'+quizData.ident+'/assessment_meta.xml'})

    return data